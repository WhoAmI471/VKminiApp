import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';

import { ModalRoot, ModalPage, ModalPageHeader, Button, FormLayout, FormItem, Select, Input, PanelHeaderButton, Text } from '@vkontakte/vkui';

import './AffairModal.css';

const AffairModal = props => {

    var catygories = [
        {
            value: '0',
            label: 'üíº –†–∞–±–æ—Ç–∞',
            color: '#AF60FFB2'
        },
        {
            value: '1',
            label: 'üè† –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞',
            color: '#FFBA52B2'
        },
        {
            value: '2',
            label: 'üí™ –°–ø–æ—Ä—Ç',
            color: '#6866E7B2'
        },
        {
            value: '3',
            label: 'üåç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            color: '#26D8FFB2'
        },
        {
            value: '4',
            label: 'üè• –ó–¥–æ—Ä–æ–≤—å–µ',
            color: '#4FC98FB2'
        },
        {
            value: '5',
            label: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã',
            color: '#9694EF'
        },
        {
            value: '6',
            label: 'üé® –•–æ–±–±–∏',
            color: '#EE4949B2'
        },
        {
            value: '7',
            label: 'üéâ –î–æ—Å—É–≥',
            color: '#59775CB2'
        },
        {
            value: '8',
            label: 'üìö –£—á–µ–±–∞',
            color: '#47F143B2'
        },
        ]

    var times = [
            {
                value: '0',
                label: '1 —á.',
                duration: '1 0 0'
            },
            {
                value: '1',
                label: '2 —á.',
                duration: '2 0 0'
            },
            {
                value: '2',
                label: '3 —á.',
                duration: '3 0 0'
            },
            {
                value: '3',
                label: '4 —á.',
                duration: '4 0 0'
            },
            {
                value: '4',
                label: '5 —á.',
                duration: '5 0 0'
            },
            {
                value: '5',
                label: '6 —á.',
                duration: '6 0 0'
            },
            {
                value: '6',
                label: '7 —á.',
                duration: '7 0 0'
            },
            {
                value: '7',
                label: '8 —á.',
                duration: '8 0 0'
            },
        ]


    const [formFilledCategory, setFormFilledCategory] = useState(false);
    const [formFilledTime, setFormFilledTime] = useState(false);
    const [formFilledAffair, setFormFilledAffair] = useState(false);

    useEffect(() => {
        if (props.isTimerActive){
            addNewAffair();
            props.setIsTimerActive(false);
        }
    }, [props.isTimerActive]);

    const addNewAffair = async () => {
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–µ–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        var category = props.category;
        var affair = props.affair;

        const timerUnit = ['—á.', '–º–∏–Ω.', '—Å.'];
        const durationArray = props.duration.split(' ');

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞, –µ—Å–ª–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0
        for (let index = durationArray.length - 1; index >= 0; index--) {
            if (parseInt(durationArray[index], 10) === 0) {
                durationArray.splice(index, 1);
                console.log('–£–¥–∞–ª—ë–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É ' + index);
            } else {
                durationArray[index] += "‚ÄØ" + timerUnit[index];
                console.log('–¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —ç–ª–µ–º–µ–Ω—Ç—É ' + durationArray[index]);
            }
        }


        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        var duration = durationArray.join(' ');

        console.log(duration); // –í—ã–≤–æ–¥–∏–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        const newAffair = {
            id: Date.now(),
            category,
            affair,
            duration
        }

        duration = props.duration;

        const newAffairInServer = {
            id: Date.now(),
            category,
            affair,
            duration
        }
        
        console.log(newAffair)
        
        try {
            const response = await fetch(`/addAffair?userId=${props.userId}&date=${props.serverDate}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(newAffairInServer), // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON
            });
    
            const data = await response.json();
            console.log(data); // –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    
            props.setAffairs([...props.affairs, newAffair]);
            close();
        } catch (error) {
            console.error(error); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        }
    };

    const close = () => {
        setFormFilledCategory(false);
        setFormFilledTime(false);
        setFormFilledAffair(false);

        props.closeModal();
    };


	return(
        <ModalRoot activeModal={props.id} className={'modal-root'}>
            <ModalPage id="create-affair" onClose={() => close()}>
                <ModalPageHeader 
                    before={<Text className='modal-header'>–ù–æ–≤–æ–µ –¥–µ–ª–æ</Text>}
                    after={
                        <PanelHeaderButton onClick={() => close()}>
                            –û—Ç–º–µ–Ω–∏—Ç—å
                        </PanelHeaderButton>
                    }
                />

                <FormLayout>
                    <FormItem 
                        top="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" 
                        onChange={e => {
                            if (e.target.value) {
                                setFormFilledCategory(true);
                                props.setCategory([catygories[e.target.value]['label'], catygories[e.target.value]['color']])
                            } else {
                                setFormFilledCategory(false);
                            }
                        }}
                    >
                        <Select
                            options={catygories}
                        />
                    </FormItem>

                    <FormItem 
                        top="–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–µ –¥–µ–ª–æ"
                        onChange={e => {
                            if (e.target.value) {
                                setFormFilledAffair(true);
                                props.setAffair(e.target.value)
                            } else {
                                setFormFilledAffair(false);
                            }
                        }}
                    >
                        <Input
                            placeholder="–û—Ç–º–µ—á–∞—é –¥—Ä"
                        />
                    </FormItem>

                    <div className='btn-padding'>
                        <Button 
                            className='create-btn'
                            stretched={true}
                            appearance=''
                            onClick={props.go} 
                            data-to='timer'
                            disabled={!(formFilledCategory && formFilledAffair)}
                        >
                            –°–æ–∑–¥–∞—Ç—å
                        </Button>
                    </div>
                </FormLayout>
            </ModalPage>

            <ModalPage id="write-affair" onClose={() => close()}>
                <ModalPageHeader 
                    before={<Text className='modal-header'>–ù–æ–≤–æ–µ –¥–µ–ª–æ</Text>}
                    after={
                        <PanelHeaderButton onClick={() => props.closeModal()}>
                            –û—Ç–º–µ–Ω–∏—Ç—å
                        </PanelHeaderButton>
                    }
                />

                <FormLayout>
                    
                    <FormItem 
                        top="–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞" 
                        onChange={e => {
                            if (e.target.value) {
                                setFormFilledCategory(true);
                            } else {
                                setFormFilledCategory(false);
                            }
                        }}
                    >
                        <Input
                            value={props.selectedDate}
                            disabled
                        />
                    </FormItem>

                    <FormItem 
                        top="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" 
                        onChange={e => {
                            if (e.target.value) {
                                setFormFilledCategory(true);
                                props.setCategory([catygories[e.target.value]['label'], catygories[e.target.value]['color']])
                            } else {
                                setFormFilledCategory(false);
                            }
                        }}
                    >
                        <Select
                            options={catygories}
                        />
                    </FormItem>

                    <FormItem 
                        top="–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–ª–∞" 
                        onChange={e => {
                            if (e.target.value) {
                                setFormFilledTime(true);
                                props.setDuration(times[e.target.value]['duration']);
                            } else {
                                setFormFilledTime(false);
                            }
                        }}
                    >
                        <Select
                            options={times}
                        />
                    </FormItem>

                    <FormItem 
                        top="–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–µ –¥–µ–ª–æ"
                        onChange={e => {
                            if (e.target.value) {
                                setFormFilledAffair(true);
                                props.setAffair(e.target.value)
                            } else {
                                setFormFilledAffair(false);
                            }
                        }}
                    >
                        <Input
                            placeholder="–û—Ç–º–µ—á–∞—é –¥—Ä"
                        />
                    </FormItem>

                    <div className='btn-padding'>
                        <Button 
                            className='create-btn'
                            stretched={true}
                            appearance=''
                            onClick={() => addNewAffair()}
                            disabled={!(formFilledCategory && formFilledTime && formFilledAffair)}
                        >
                            –°–æ–∑–¥–∞—Ç—å
                        </Button>
                    </div>
                </FormLayout>
            </ModalPage>
        </ModalRoot>
	)
};

AffairModal.propTypes = {
	id: PropTypes.string.isRequired,
	closeModal: PropTypes.func.isRequired,
    selectedDate: PropTypes.string.isRequired,
	affairs: PropTypes.array.isRequired,
	setAffairs: PropTypes.func.isRequired,
};

export default AffairModal;
